Best Model atm:
- 3 class, 6k images
- 77% train, 77% validation

pilih_ikan2   = ['Solea solea',
                'Mugil cephalus',
                'Dasyatis centroura']

df_ikan2 = df_ikan[df_ikan['label'].isin(pilih_ikan2)]
df_ikan2.reset_index(drop=True, inplace=True)

df_train, df_test = train_test_split(df_ikan2, test_size=0.2, shuffle=True, random_state=1)

train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=90,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   zoom_range=0.3,
                                   horizontal_flip=True,
                                   vertical_flip=True,
                                   fill_mode='nearest',
                                   validation_split=0.2,
                                   shear_range=0.3,
                                   channel_shift_range=0.1,
                                   brightness_range=[0.8, 1.2],
                                   featurewise_center=True,
                                   samplewise_center=True,
                                   featurewise_std_normalization=True,
                                   samplewise_std_normalization=True)

test_datagen = ImageDataGenerator(rescale=1./255)

batch_sizeku = 32
epochs = 50
target_sizes = (255, 255)

# train images
gambar_latih = train_datagen.flow_from_dataframe(dataframe=df_train,
                                                 x_col='Direktori',
                                                 y_col='label',
                                                 target_size=target_sizes,
                                                 color_mode='rgb',
                                                 class_mode='categorical',
                                                 batch_size=batch_sizeku,
                                                 shuffle=True,
                                                 seed=42,
                                                 subset='training')

# validation images
gambar_valid = train_datagen.flow_from_dataframe(dataframe=df_train,
                                                 x_col='Direktori',
                                                 y_col='label',
                                                 target_size=target_sizes,
                                                 color_mode='rgb',
                                                 class_mode='categorical',
                                                 batch_size=batch_sizeku,
                                                 shuffle=True,
                                                 seed=42,
                                                 subset='validation')

# test images
gambar_tests = test_datagen.flow_from_dataframe(dataframe=df_test,
                                                x_col='Direktori',
                                                y_col='label',
                                                target_size=target_sizes,
                                                color_mode='rgb',
                                                class_mode='categorical',
                                                batch_size=batch_sizeku,
                                                shuffle=True)

# Dropout ga boleh diganti
activ = 'relu'
model7 = Sequential()

# Layer 1
model7.add(Conv2D(8, (3, 3), activation=activ, padding='same', input_shape=(255, 255, 3))) 
model7.add(BatchNormalization())
model7.add(MaxPooling2D((2, 2)))
model7.add(Dropout(0.2))

# Layer 2
model7.add(Conv2D(16, (3, 3), activation=activ, padding='same', kernel_regularizer=l2(0.01)))
model7.add(BatchNormalization())
model7.add(MaxPooling2D((2, 2)))
model7.add(Dropout(0.3))

# Layer 3
model7.add(Conv2D(32, (3, 3), activation=activ, padding='same', kernel_regularizer=l2(0.01)))
model7.add(BatchNormalization())
model7.add(MaxPooling2D((2, 2)))
model7.add(Dropout(0.3))

# Global Average Pooling
model7.add(GlobalAveragePooling2D())

# Fully Connected Layer
model7.add(Dense(32, activation=activ, kernel_regularizer=l2(0.01)))
model7.add(Dropout(0.5))

# Output Layer
model7.add(Dense(3, activation='softmax'))

model7.compile(optimizer=SGD(learning_rate=1e-3, momentum=0.9),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 3 class, 6k data total
# awalnya ini bagus 79% train, 80% val


early_stopping2 = EarlyStopping(monitor='val_accuracy',
                                patience=4,
                                restore_best_weights=True)

reduce_lr  = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-7)

model_checkpoint = ModelCheckpoint('best_model1.keras', save_best_only=True, monitor='val_accuracy', mode='max')

callbacks = [early_stopping2, reduce_lr, model_checkpoint]

latih7 = model7.fit(gambar_latih,
                    epochs=epochs,
                    callbacks=callbacks,
                    validation_data=gambar_valid)

Epoch 1/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 130s 948ms/step - accuracy: 0.4027 - loss: 2.0104 - val_accuracy: 0.3583 - val_loss: 1.6767 - learning_rate: 0.0010
Epoch 2/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 720ms/step - accuracy: 0.5956 - loss: 1.4960 - val_accuracy: 0.5083 - val_loss: 1.5377 - learning_rate: 0.0010
Epoch 3/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 724ms/step - accuracy: 0.6383 - loss: 1.3860 - val_accuracy: 0.7000 - val_loss: 1.3782 - learning_rate: 0.0010
Epoch 4/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 721ms/step - accuracy: 0.6456 - loss: 1.3210 - val_accuracy: 0.7188 - val_loss: 1.2808 - learning_rate: 0.0010
Epoch 5/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 96s 761ms/step - accuracy: 0.6868 - loss: 1.2636 - val_accuracy: 0.7344 - val_loss: 1.2136 - learning_rate: 0.0010
Epoch 6/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 98s 773ms/step - accuracy: 0.6809 - loss: 1.2191 - val_accuracy: 0.7375 - val_loss: 1.1561 - learning_rate: 0.0010
Epoch 7/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 92s 734ms/step - accuracy: 0.7185 - loss: 1.1458 - val_accuracy: 0.7688 - val_loss: 1.1089 - learning_rate: 0.0010
Epoch 8/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 726ms/step - accuracy: 0.7060 - loss: 1.1384 - val_accuracy: 0.7646 - val_loss: 1.0837 - learning_rate: 0.0010
Epoch 9/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 724ms/step - accuracy: 0.7252 - loss: 1.0774 - val_accuracy: 0.7792 - val_loss: 1.0051 - learning_rate: 0.0010
Epoch 10/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 725ms/step - accuracy: 0.7357 - loss: 1.0441 - val_accuracy: 0.7729 - val_loss: 0.9935 - learning_rate: 0.0010
Epoch 11/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 722ms/step - accuracy: 0.7360 - loss: 1.0305 - val_accuracy: 0.7771 - val_loss: 0.9683 - learning_rate: 0.0010
Epoch 12/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 719ms/step - accuracy: 0.7414 - loss: 0.9944 - val_accuracy: 0.7833 - val_loss: 0.9299 - learning_rate: 0.0010
Epoch 13/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 728ms/step - accuracy: 0.7484 - loss: 0.9556 - val_accuracy: 0.7792 - val_loss: 0.9161 - learning_rate: 0.0010
Epoch 14/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 92s 728ms/step - accuracy: 0.7405 - loss: 0.9430 - val_accuracy: 0.7740 - val_loss: 0.8909 - learning_rate: 0.0010
Epoch 15/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 716ms/step - accuracy: 0.7462 - loss: 0.9188 - val_accuracy: 0.8104 - val_loss: 0.8492 - learning_rate: 0.0010
Epoch 16/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 721ms/step - accuracy: 0.7607 - loss: 0.8830 - val_accuracy: 0.8052 - val_loss: 0.8418 - learning_rate: 0.0010
Epoch 17/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 723ms/step - accuracy: 0.7826 - loss: 0.8502 - val_accuracy: 0.7990 - val_loss: 0.8201 - learning_rate: 0.0010
Epoch 18/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 92s 731ms/step - accuracy: 0.7711 - loss: 0.8779 - val_accuracy: 0.8083 - val_loss: 0.7648 - learning_rate: 0.0010
Epoch 19/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 726ms/step - accuracy: 0.7645 - loss: 0.8416 - val_accuracy: 0.8271 - val_loss: 0.7552 - learning_rate: 0.0010
Epoch 20/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 718ms/step - accuracy: 0.7821 - loss: 0.8218 - val_accuracy: 0.8135 - val_loss: 0.7704 - learning_rate: 0.0010
Epoch 21/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 720ms/step - accuracy: 0.7759 - loss: 0.8084 - val_accuracy: 0.8167 - val_loss: 0.7387 - learning_rate: 0.0010
Epoch 22/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 722ms/step - accuracy: 0.7920 - loss: 0.7715 - val_accuracy: 0.8219 - val_loss: 0.7198 - learning_rate: 0.0010
Epoch 23/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 728ms/step - accuracy: 0.7884 - loss: 0.7676 - val_accuracy: 0.7729 - val_loss: 0.8087 - learning_rate: 0.0010
Epoch 24/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 720ms/step - accuracy: 0.7852 - loss: 0.7663 - val_accuracy: 0.7885 - val_loss: 0.7988 - learning_rate: 0.0010
Epoch 25/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 714ms/step - accuracy: 0.7914 - loss: 0.7427 - val_accuracy: 0.8240 - val_loss: 0.6851 - learning_rate: 0.0010
Epoch 26/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 714ms/step - accuracy: 0.8047 - loss: 0.7074 - val_accuracy: 0.8000 - val_loss: 0.6949 - learning_rate: 0.0010
Epoch 27/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 720ms/step - accuracy: 0.7875 - loss: 0.7287 - val_accuracy: 0.7854 - val_loss: 0.7560 - learning_rate: 0.0010
Epoch 28/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 720ms/step - accuracy: 0.8019 - loss: 0.6920 - val_accuracy: 0.8271 - val_loss: 0.6427 - learning_rate: 0.0010
Epoch 29/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 714ms/step - accuracy: 0.8201 - loss: 0.6823 - val_accuracy: 0.7573 - val_loss: 0.8763 - learning_rate: 0.0010
Epoch 30/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 720ms/step - accuracy: 0.8144 - loss: 0.6637 - val_accuracy: 0.8198 - val_loss: 0.6341 - learning_rate: 0.0010
Epoch 31/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 727ms/step - accuracy: 0.7918 - loss: 0.6994 - val_accuracy: 0.8073 - val_loss: 0.6673 - learning_rate: 0.0010
Epoch 32/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 92s 731ms/step - accuracy: 0.7958 - loss: 0.6797 - val_accuracy: 0.8365 - val_loss: 0.6334 - learning_rate: 0.0010
Epoch 33/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 721ms/step - accuracy: 0.8101 - loss: 0.6548 - val_accuracy: 0.8188 - val_loss: 0.6776 - learning_rate: 0.0010
Epoch 34/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 720ms/step - accuracy: 0.7974 - loss: 0.6609 - val_accuracy: 0.8208 - val_loss: 0.6137 - learning_rate: 0.0010
Epoch 35/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 720ms/step - accuracy: 0.8108 - loss: 0.6372 - val_accuracy: 0.8073 - val_loss: 0.6658 - learning_rate: 0.0010
Epoch 36/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 720ms/step - accuracy: 0.8225 - loss: 0.6054 - val_accuracy: 0.8323 - val_loss: 0.5906 - learning_rate: 0.0010
Epoch 37/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 726ms/step - accuracy: 0.8092 - loss: 0.6251 - val_accuracy: 0.8396 - val_loss: 0.5870 - learning_rate: 0.0010
Epoch 38/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 721ms/step - accuracy: 0.8260 - loss: 0.6105 - val_accuracy: 0.8083 - val_loss: 0.6003 - learning_rate: 0.0010
Epoch 39/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 716ms/step - accuracy: 0.8005 - loss: 0.6208 - val_accuracy: 0.8542 - val_loss: 0.5281 - learning_rate: 0.0010
Epoch 40/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 717ms/step - accuracy: 0.8343 - loss: 0.5689 - val_accuracy: 0.7927 - val_loss: 0.7099 - learning_rate: 0.0010
Epoch 41/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 724ms/step - accuracy: 0.8039 - loss: 0.5998 - val_accuracy: 0.8021 - val_loss: 0.6146 - learning_rate: 0.0010
Epoch 42/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 717ms/step - accuracy: 0.8161 - loss: 0.5807 - val_accuracy: 0.8469 - val_loss: 0.5295 - learning_rate: 0.0010
Epoch 43/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 721ms/step - accuracy: 0.8526 - loss: 0.5452 - val_accuracy: 0.8104 - val_loss: 0.5826 - learning_rate: 5.0000e-04
Epoch 44/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 723ms/step - accuracy: 0.8160 - loss: 0.5689 - val_accuracy: 0.8719 - val_loss: 0.4817 - learning_rate: 5.0000e-04
Epoch 45/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 92s 728ms/step - accuracy: 0.8548 - loss: 0.5059 - val_accuracy: 0.8417 - val_loss: 0.5341 - learning_rate: 5.0000e-04
Epoch 46/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 721ms/step - accuracy: 0.8462 - loss: 0.5413 - val_accuracy: 0.8594 - val_loss: 0.5108 - learning_rate: 5.0000e-04
Epoch 47/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 722ms/step - accuracy: 0.8533 - loss: 0.5153 - val_accuracy: 0.8417 - val_loss: 0.5052 - learning_rate: 5.0000e-04
Epoch 48/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 90s 717ms/step - accuracy: 0.8409 - loss: 0.5284 - val_accuracy: 0.8708 - val_loss: 0.4962 - learning_rate: 2.5000e-04
Epoch 49/50
120/120 ━━━━━━━━━━━━━━━━━━━━ 91s 725ms/step - accuracy: 0.8486 - loss: 0.5116 - val_accuracy: 0.8375 - val_loss: 0.5037 - learning_rate: 2.5000e-04


# 84% Both Train and Val


Berdasarkan hasil tersebut performa model sudah cukup bagus namun akurasi pada data latih dan data validasi itu masih stuck di 78% dan saya ingin akurasinya meningkat lebih tinggi lagi. Berdasarkan informasi data augmentasi, modeling, callback, dan pelatihan tersebut. Bisakah kamu membuatkan solusi untuk meningkatkan akurasi dari Klasifikasi Gambar 3 kelas tersebut? Saya ingin kamu membuatkan solusinya dengan memperbaiki kode tersebut.

Dari segi epoch yaitu 30. Apakah akan bagus jika disini saya akan meningkatkan jumlah epochnya untuk meningkatkan akurasi?